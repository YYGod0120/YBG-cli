{"version":3,"sources":["../src/compile/extractMd.ts","../src/utils/time.ts","../src/locale/content.ts","../src/create/createPage.ts","../src/create/EssayCss.ts","../src/utils/randomColor.ts","../src/node/cli.ts","../src/create/createMD.ts","../src/create/createImg.ts","../src/remove/removePage.ts"],"sourcesContent":["import fs from \"fs\";\r\nimport matter from \"gray-matter\";\r\nimport { marked } from \"marked\";\r\nimport { UTCToString } from \"../utils/time\";\r\nimport path from \"path\";\r\nimport { basePath, processHTML } from \"../locale/content\";\r\n\r\nconst _postFolder = path.join(basePath, \"/_posts\");\r\n\r\nexport type mdFile = {\r\n  mdMatter: matter.GrayMatterFile<string>;\r\n  mdHtml: string;\r\n};\r\n\r\nexport async function fileToJSON(): Promise<mdFile[]> {\r\n  let files: mdFile[] = [];\r\n  const fileList = fs.readdirSync(_postFolder);\r\n\r\n  for (const file of fileList) {\r\n    const filePath = path.join(_postFolder, file);\r\n    const fileContent = fs.readFileSync(filePath, \"utf-8\");\r\n    const parsedFile = matter(fileContent);\r\n    const newMatter = {\r\n      ...parsedFile,\r\n      data: { ...parsedFile.data, date: UTCToString(parsedFile.data.date) },\r\n    };\r\n    const htmlText = processHTML(await marked(parsedFile.content));\r\n    console.log(file);\r\n\r\n    files.push({ mdMatter: newMatter, mdHtml: htmlText });\r\n  }\r\n\r\n  return files;\r\n}\r\n","import dayjs from \"dayjs\";\r\n\r\nexport function UTCToString(date: string): string {\r\n  return dayjs(date).format(\"YYYY-MM-DD\");\r\n}\r\n\r\nexport const currentDate = dayjs().format(\"YYYY-MM-DD\");\r\n","import path from \"path\";\r\nimport { mdFile } from \"../compile/extractMd\";\r\nexport const basePath = path.join(process.cwd(), \"./\");\r\nexport const essayCss = `\r\nblockquote {\r\n  margin-left: 0;\r\n  border-left: 4px solid #bac2cb;\r\n  padding-left: 12px;\r\n  color: #4e5969;\r\n}\r\nul {\r\n  margin: 0;\r\n  padding-left: 30px;\r\n}\r\na {\r\n  display: inline-block;\r\n  position: relative;\r\n}\r\np {\r\n  margin-top: 18px;\r\n  margin-bottom: 18px;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin-top: 30px;\r\n  margin-bottom: 10px;\r\n  text-decoration: underline;\r\n  text-underline-offset: 4px;\r\n}\r\na::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  width: 100%;\r\n  transform: scaleX(0);\r\n  height: 1px;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: #4e5969;\r\n  transform-origin: bottom right;\r\n  transition: transform 0.25s ease-out;\r\n}\r\n\r\na:hover::after {\r\n  transform: scaleX(1);\r\n  transform-origin: bottom left;\r\n}\r\n`;\r\n\r\nexport function makeEssay(title: string, date: string) {\r\n  const content = `---\r\ntitle: ${title}\r\ndate: ${date}\r\ncategories: \r\nexcerpt: \r\n---\r\n    `;\r\n  return content;\r\n}\r\n\r\nexport async function makeEssayPage(file: mdFile) {\r\n  const template = `\r\n    import \"../../essay.css\";\r\n    import Image from \"next/image\";\r\n    \r\n    export default function Page() {\r\n      return (\r\n        <div className=\" mt-8 bg-white w-[60vw] flex flex-col items-start text-lg\">\r\n          <span className=\"text-4xl text-left px-24 pt-12 text-visit-font font-bold\">\r\n            ${file.mdMatter.data.title}\r\n          </span>\r\n          <span className=\" text-[#86909C] px-24 pt-5 text-xl\">\r\n            Categories: ${file.mdMatter.data.categories} &nbsp; &nbsp; ${file.mdMatter.data.date}\r\n          </span>\r\n          <div className=\"flex text-start flex-col pb-12 px-24\">\r\n          ${file.mdHtml}\r\n          </div>\r\n          </div>\r\n        );\r\n      }\r\n    `;\r\n  return template;\r\n}\r\n\r\nexport function processHTML(html: string) {\r\n  const replacedText = html.replace(\r\n    /<img(.*?)src=\"(.*?)\"/g,\r\n    '<Image$1src=\"$2\"'\r\n  );\r\n  // 移除路径中的 ../public\r\n  const finalText = replacedText.replace(\r\n    /<Image\\s+src=\"\\.\\.\\/(.*?)\"/g,\r\n    '<Image src=\"/imgs/$1\"'\r\n  );\r\n  const finalHtml = finalText.replace(/<Image(.*?)>/g, \"<Image$1 />\");\r\n  return finalHtml;\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport { basePath, makeEssayPage } from \"../locale/content\";\r\nimport { mdFile } from \"../compile/extractMd\";\r\nimport { writeCSS } from \"./EssayCss\";\r\nimport { rimrafSync } from \"rimraf\";\r\nimport { getRandomColor } from \"../utils/randomColor\";\r\n\r\nexport function writeFile(files: mdFile[]) {\r\n  files.forEach(async (file, index) => {\r\n    const foldPath = `${basePath}/app/essay/${file.mdMatter.data.date}/${\r\n      index + 1\r\n    }`;\r\n    const filePath = path.join(foldPath, \"page.tsx\");\r\n    const content = await makeEssayPage(file);\r\n    rimrafSync(`${basePath}/app/essay`, {\r\n      preserveRoot: false,\r\n    });\r\n\r\n    fs.mkdir(foldPath, { recursive: true }, (error) => {\r\n      if (error) {\r\n        console.log(error);\r\n      } else {\r\n        writeCSS();\r\n        fs.writeFile(filePath, content, (err) => {\r\n          if (err) {\r\n            console.error(\"Error creating file:\", err);\r\n          } else {\r\n            console.log(\r\n              `Page-${getRandomColor(\r\n                file.mdMatter.data.title\r\n              )} created successfully.`\r\n            );\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport { basePath, essayCss } from \"../locale/content\";\r\nexport function writeCSS() {\r\n  const filePath = path.join(basePath, \"/app/essay/essay.css\");\r\n  fs.access(filePath, fs.constants.F_OK, (err) => {\r\n    if (err) {\r\n      // 文件不存在，写入文件\r\n      fs.writeFile(filePath, essayCss, (writeErr) => {\r\n        if (writeErr) throw writeErr;\r\n      });\r\n    }\r\n  });\r\n}\r\n","import { cyan, yellow, green, blue, red } from \"picocolors\";\r\nexport function getRandomColor(string: string) {\r\n  const colors = [cyan, yellow, green, blue, red];\r\n  const randomIndex = Math.floor(Math.random() * colors.length);\r\n  return colors[randomIndex](string);\r\n}\r\n","import { fileToJSON } from \"../compile/extractMd\";\r\nimport { writeFile } from \"../create/createPage\";\r\nimport cac from \"cac\";\r\nimport { createEssay } from \"../create/createMD\";\r\nimport { currentDate } from \"../utils/time\";\r\nimport { createImgs } from \"../create/createImg\";\r\nimport { removePage } from \"../remove/removePage\";\r\nconst cli = cac();\r\ncli.command(\"compile\", \"mdToTsx\").action(async () => {\r\n  const files = await fileToJSON();\r\n  writeFile(files);\r\n});\r\ncli\r\n  .command(\"create [project]\", \"create the new essay\")\r\n  .action(async (project) => {\r\n    createEssay(currentDate, project);\r\n    createImgs(project);\r\n  });\r\ncli\r\n  .command(\"remove [project]\", \"remove the new essay\")\r\n  .action(async (project) => {\r\n    removePage(project);\r\n  });\r\n\r\ncli.parse();\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport { basePath, makeEssay } from \"../locale/content\";\r\nimport { getRandomColor } from \"../utils/randomColor\";\r\n\r\nexport function createEssay(date: string, title: string) {\r\n  const _postsPath = path.join(basePath, \"/_posts\");\r\n  const filePath = path.join(_postsPath, `${title}.md`);\r\n  const mdFile = makeEssay(title, date);\r\n  fs.mkdir(_postsPath, { recursive: true }, (error) => {\r\n    if (error) {\r\n      console.log(error);\r\n    } else {\r\n      fs.writeFile(filePath, mdFile, (err) => {\r\n        if (err) {\r\n          console.error(\"Error creating file:\", err);\r\n        } else {\r\n          console.log(`Essay ${getRandomColor(title)} created successfully.`);\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport { basePath } from \"../locale/content\";\r\n\r\nexport function createImgs(title: string) {\r\n  const foldPath = `${basePath}/public/imgs/${title}`;\r\n  fs.mkdir(foldPath, { recursive: true }, (error) => {\r\n    if (error) console.log(error);\r\n  });\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport { rimraf } from \"rimraf\";\r\nimport { basePath } from \"../locale/content\";\r\n\r\nexport function removePage(file: string) {\r\n  //   const PagePath = `${basePath}/app/essay/${file.mdMatter.data.date}`;\r\n  const MdPath = path.join(basePath, `/_posts/${file}.md`);\r\n  fs.unlink(MdPath, (err) => {\r\n    if (err) {\r\n      console.error(`Error deleting file: ${err}`);\r\n    } else {\r\n      console.log(`File-${file} deleted successfully`);\r\n    }\r\n  });\r\n  const foldPath = `${basePath}/public/imgs/${file}`;\r\n  rimraf(foldPath, { preserveRoot: false });\r\n}\r\n"],"mappings":"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","names":["dayjs","import_path","path","path","fs","matter","import_path","import_fs","import_path","import_fs","path","fs","path","fs","import_path","import_fs","path","fs","import_fs","fs","import_path","import_fs","import_rimraf","path","fs","cac"]}
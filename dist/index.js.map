{"version":3,"sources":["../src/compile/extractMd.ts","../src/utils/time.ts","../src/constant/content.ts","../src/compile/HtmlToNext.ts","../src/create/writeFiles.ts","../src/create/EssayCss.ts","../src/utils/randomColor.ts","../src/node/cli.ts","../src/create/createMD.ts","../src/create/createImg.ts","../src/remove/removePage.ts","../src/create/createFileData.ts","../src/utils/transformType.ts","../src/utils/sortByDate.ts","../src/deploy/index.ts","../src/utils/readConfig.ts","../src/compile/remarkTest.ts"],"sourcesContent":["import fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { marked } from \"marked\";\nimport { UTCToString } from \"../utils/time\";\nimport path from \"path\";\nimport { basePath, makeImportPic } from \"../constant/content\";\nimport { HtmlToNext } from \"./HtmlToNext\";\nimport { translateWord } from \"../utils/translate\";\nconst _postFolder = path.join(basePath, \"/_posts\");\n\nexport type mdFile = {\n  id: string;\n  mdMatter: matter.GrayMatterFile<string>;\n  mdHtml: string;\n  mdEnHtml?: string;\n  other?: {\n    picPath: string;\n  };\n};\n// * hash唯一化\nfunction simpleHash(input: string) {\n  let hash = 0;\n  for (let i = 0; i < input.length; i++) {\n    hash += input.charCodeAt(i);\n  }\n  return JSON.stringify(hash % 1000); // 取模以确保哈希值在一定范围内\n}\nexport async function compileFile(project?: string): Promise<mdFile[]> {\n  let compiledFiles: mdFile[] = [];\n  let fileList = fs.readdirSync(_postFolder);\n\n  if (project) {\n    fileList = fileList.filter((file) => {\n      return file === `${project}.md`;\n    });\n  }\n  for (const file of fileList) {\n    const filePath = path.join(_postFolder, file);\n    const fileContent = fs.readFileSync(filePath, \"utf-8\");\n    const parsedFile = matter(fileContent);\n    // const enText = await translateWord(parsedFile.content);\n    const newMatter = {\n      ...parsedFile,\n      data: { ...parsedFile.data, date: UTCToString(parsedFile.data.date) },\n    };\n    const picPath = makeImportPic(await marked(parsedFile.content));\n    const htmlText = HtmlToNext(await marked(parsedFile.content));\n    // const enHtmlText = HtmlToNext(await marked(enText));\n\n    //新增翻译\n    compiledFiles.push(\n      picPath\n        ? {\n            id: simpleHash(file),\n            mdMatter: newMatter,\n            mdHtml: htmlText,\n            other: {\n              picPath: picPath,\n            },\n          }\n        : { id: simpleHash(file), mdMatter: newMatter, mdHtml: htmlText }\n    );\n  }\n\n  return compiledFiles;\n}\n","import dayjs from \"dayjs\";\n\nexport function UTCToString(date: string): string {\n  return dayjs(date).format(\"YYYY-MM-DD\");\n}\n\nexport const currentDate = dayjs().format(\"YYYY-MM-DD\");\n","import path from \"path\";\nimport { mdFile } from \"../compile/extractMd\";\nexport const basePath = path.join(process.cwd(), \"./\");\nexport const ESSAYCSS = `\nblockquote {\n  margin-left: 0;\n  border-left: 4px solid #bac2cb;\n  padding-left: 12px;\n  color: #4e5969;\n}\nul {\n  margin: 0;\n  padding-left: 30px;\n}\na {\n  text-decoration: none; /* 移除下划线 */\n  color: #1d9bf0; /* 使用继承的颜色 */\n  cursor: pointer; /* 修改鼠标样式为指针 */\n  outline: none; /* 移除默认的焦点边框 */\n}\np {\n  margin-top: 18px;\n  margin-bottom: 18px;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 30px;\n  margin-bottom: 10px;\n  text-decoration: underline;\n  text-underline-offset: 6px;\n}\n@media screen and (max-width: 540px) {\n  h1 {\n    font-size: 1.5em; /* 1.5倍于基础字体大小 */\n    line-height: 1.5em;\n  }\n\n  h2 {\n    font-size: 1.35em; /* 1.25倍于基础字体大小 */\n    line-height: 1.5em;\n  }\n\n  h3 {\n    font-size: 1.2em; /* 基础字体大小 */\n    line-height: 1.5em;\n  }\n  h4 {\n    font-size: 1.05em; /* 基础字体大小 */\n    line-height: 1.5em;\n  }\n  h5 {\n    font-size: 1em; /* 基础字体大小 */\n    line-height: 1.5em;\n  }\n  h6 {\n    font-size: 1em; /* 基础字体大小 */\n    line-height: 1.5em;\n  }\n}\na:hover{\n  color:#0c7ad8\n}\n`;\n\nexport function makeEssay(title: string, date: string) {\n  const content = `---\ntitle: ${title}\ndate: ${date}\ncategories: \nexcerpt: \n---\n    `;\n  return content;\n}\nexport function makeImportPic(html: string) {\n  let IMGIMPORT = \"\";\n  const fileImgs = html.match(/<img\\s+src=\"(.*?)\"\\s+alt=\"(.*?)\".*?\\/>/g);\n  const importStatements = fileImgs?.map((img, index) => {\n    const [, srcValues] = img.match(/src\\s*=\"(.*?)\"/) || [];\n    const oneSrc = srcValues.split(\"/\");\n    const src = oneSrc[oneSrc.length - 1];\n    return (\n      `//@ts-ignore` +\n      \"\\n\" +\n      `import ${src.slice(0, src.lastIndexOf(\".\"))} from \"@/public${srcValues}\"`\n    );\n  });\n\n  if (importStatements) {\n    IMGIMPORT += importStatements.join(\"\\n\");\n  }\n  return IMGIMPORT;\n}\nexport async function makeEssayPage(file: mdFile) {\n  let TEMPLATE = `\n  import Image from \"next/image\";\nimport dynamic from \"next/dynamic\";\n  ${file.other ? file.other.picPath : \"\"}\n  // @ts-ignore\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\n// @ts-ignore\nimport { oneLight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"@/app/[language]/essay/essay.css\";\nexport default function Page() {\n  const Comment = dynamic(() => import(\"@/app/[language]/components/Comment\"), {\n    ssr: false,\n  });\n  return (\n    <div>\n    <div className=\"mt-8 bg-white flex flex-col items-start text-lg shadow-lg rounded-sm\">\n    <span className=\"text-4xl text-left lg:px-20 md:px-[2.5vw] px-4 pt-12 text-visit-font font-bold\">\n      ${file.mdMatter.data.title}\n    </span>\n    <span className=\"text-[#86909C] lg:px-20 pt-5 px-4 text-xl mb-5 md:px-[2.5vw]\">\n      Categories: ${file.mdMatter.data.categories} &nbsp;  ${\n    file.mdMatter.data.date\n  }\n    </span>\n    <div className=\"flex text-start break-words flex-col pb-12 lg:px-20 lg:w-[740px] md:w-[90vw] md:px-[2.5vw] w-[95vw] px-[2.5vw]\">\n      ${file.mdHtml}\n    </div>\n    \n  </div>\n  <div className=\"mt-12 py-8 bg-white px-6\">\n  <Comment />\n</div>\n    </div>\n  );\n}`;\n\n  return TEMPLATE;\n}\n","import he from \"he\";\nfunction ImageRepimg(html: string) {\n  const processedHtml = html.replace(\n    /<img\\s+src=\"([^\"]*)\"\\s+alt=\"([^\"]*)\"(?:\\s+width=\"([^\"]*)\")?[^>]*\\/>/g,\n    function (match, src, alt) {\n      const modifiedSrc = src.split(\"/\");\n      const newSrc = modifiedSrc[modifiedSrc.length - 1]; // Your modification logic for src\n\n      const modifiedAlt = alt; // Your modification logic for alt\n\n      return `<Image src={${newSrc.slice(\n        0,\n        newSrc.lastIndexOf(\".\")\n      )}} alt=\"${modifiedAlt}\" \n      sizes=\"100vw\"\n      style={{\n        width: \"100%\",\n        height: 'auto',\n      }} />`;\n    }\n  );\n  return processedHtml;\n}\nfunction replaceClassName(html: string) {\n  const processedHtml = html.replace(/class=/g, \"className=\");\n  return processedHtml;\n}\nfunction highLightHtml(html: string) {\n  // 在代码块内的特殊字符前加上 \\\n  const replacedString1 = html.replace(\n    /<pre><code className=\"language-(\\w+)\">([\\s\\S]*?)<\\/code><\\/pre>/g,\n    (_, language, codeContent) => {\n      //转义符删除\n      const decodeCode = he.decode(codeContent);\n      const codeWithBackslash = decodeCode.replace(/([^\\w\\s\"'])/g, \"\\\\$1\");\n      return `<SyntaxHighlighter language=\"${language}\" style={oneLight} showLineNumbers>{ \\`${codeWithBackslash}\\` }</SyntaxHighlighter>`;\n    }\n  );\n\n  return replacedString1;\n}\nexport function HtmlToNext(html: string) {\n  //替换img标签\n  const step1Html = ImageRepimg(html);\n  //替换class为className\n  const step2Html = replaceClassName(step1Html);\n  //高亮代码\n  const step3Html = highLightHtml(step2Html);\n  //闭合分割线\n  const step4Html = step3Html.replace(/<hr>/g, \"<hr />\");\n  return step4Html;\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport { basePath, makeEssayPage } from \"../constant/content\";\nimport { mdFile } from \"../compile/extractMd\";\nimport { writeCSS } from \"./EssayCss\";\nimport { rimrafSync } from \"rimraf\";\nimport { getRandomColor } from \"../utils/randomColor\";\n\nexport function writeFile(files: mdFile[]) {\n  // rimrafSync(`${basePath}/app/[language]/essay`, {\n  //   preserveRoot: false,\n  // });\n  files.forEach(async (file) => {\n    rimrafSync(`${basePath}/app/[language]/essay/${file.mdMatter.data.date}`, {\n      preserveRoot: false,\n    });\n    const foldPath = `${basePath}/app/[language]/essay/${file.mdMatter.data.date}/${file.id}`;\n    const filePath = path.join(foldPath, \"page.tsx\");\n    const content = await makeEssayPage(file);\n\n    fs.mkdir(foldPath, { recursive: true }, (error) => {\n      if (error) {\n        console.log(error);\n      } else {\n        writeCSS();\n        fs.writeFile(filePath, content, (err) => {\n          if (err) {\n            console.error(\"Error creating file:\", err);\n          } else {\n            console.log(\n              `Page-${getRandomColor(\n                file.mdMatter.data.title\n              )} created successfully.`\n            );\n          }\n        });\n      }\n    });\n  });\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport { basePath, ESSAYCSS } from \"../constant/content\";\nexport function writeCSS() {\n  const filePath = path.join(basePath, \"/app/[language]/essay/essay.css\");\n  fs.access(filePath, fs.constants.F_OK, (err) => {\n    if (err) {\n      // 文件不存在，写入文件\n      fs.writeFile(filePath, ESSAYCSS, (writeErr) => {\n        if (writeErr) throw writeErr;\n      });\n    }\n  });\n}\n","import pkg from \"picocolors\";\nconst { cyan, yellow, green, red, blue } = pkg;\nexport function getRandomColor(string: string) {\n  const colors = [cyan, yellow, green, red, blue];\n  const randomIndex = Math.floor(Math.random() * colors.length);\n  return colors[randomIndex](string);\n}\n","import { compileFile } from \"../compile/extractMd\";\nimport { writeFile } from \"../create/writeFiles\";\nimport cac from \"cac\";\nimport { createEssay } from \"../create/createMD\";\nimport { currentDate } from \"../utils/time\";\nimport { createImgs } from \"../create/createImg\";\nimport { removePage } from \"../remove/removePage\";\nimport { writeFileData } from \"../create/createFileData\";\nimport { index, init } from \"../deploy\";\nimport { translateWord } from \"../utils/translate\";\nimport { test } from \"../compile/remarkTest\";\nconst cli = cac();\ncli\n  .command(\"compile [project]\", \"mdToTsx\")\n  .option(\"-a, --all\", \"Compile all projects\")\n  .action(async (project, options) => {\n    const { all } = options;\n    const files = all ? await compileFile() : await compileFile(project);\n    writeFile(files);\n    writeFileData();\n  });\ncli\n  .command(\"create [project]\", \"create the new essay\")\n  .action(async (project) => {\n    createEssay(currentDate, project);\n    createImgs(project);\n  });\ncli\n  .command(\"remove [project]\", \"remove the new essay\")\n  .action(async (project) => {\n    removePage(project);\n  });\ncli.command(\"init\", \"for deploy\").action(async () => {\n  init();\n});\ncli.command(\"deploy\", \"deploy the new essay\").action(async () => {\n  index();\n});\ncli.command(\"t\", \"测试\").action(async () => {\n  console.log(`开发 ⚡️⚡️⚡️`);\n  console.log(await test());\n});\ncli.parse();\n","import path from \"path\";\nimport fs from \"fs\";\nimport { basePath, makeEssay } from \"../constant/content\";\nimport { getRandomColor } from \"../utils/randomColor\";\n\nexport function createEssay(date: string, title: string) {\n  const _postsPath = path.join(basePath, \"/_posts\");\n  const filePath = path.join(_postsPath, `${title}.md`);\n  const mdFile = makeEssay(title, date);\n  fs.mkdir(_postsPath, { recursive: true }, (error) => {\n    if (error) {\n      console.log(error);\n    } else {\n      fs.writeFile(filePath, mdFile, (err) => {\n        if (err) {\n          console.error(\"Error creating file:\", err);\n        } else {\n          console.log(`Essay ${getRandomColor(title)} created successfully.`);\n        }\n      });\n    }\n  });\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport { basePath } from \"../constant/content\";\n\nexport function createImgs(title: string) {\n  const foldPath = `${basePath}/public/imgs/${title}`;\n  fs.mkdir(foldPath, { recursive: true }, (error) => {\n    if (error) console.log(error);\n  });\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport { rimraf } from \"rimraf\";\nimport { basePath } from \"../constant/content\";\n\nexport function removePage(file: string) {\n  //   const PagePath = `${basePath}/app/essay/${file.mdMatter.data.date}`;\n  const MdPath = path.join(basePath, `/_posts/${file}.md`);\n  fs.unlink(MdPath, (err) => {\n    if (err) {\n      console.error(`Error deleting file: ${err}`);\n    } else {\n      console.log(`File-${file} deleted successfully`);\n    }\n  });\n  const foldPath = `${basePath}/public/imgs/${file}`;\n  rimraf(foldPath, { preserveRoot: false });\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport { basePath } from \"../constant/content\";\nimport { compileFile } from \"../compile/extractMd\";\nimport { transformType } from \"../utils/transformType\";\nimport { sortByDate } from \"../utils/sortByDate\";\nexport function writeFileData() {\n  const fileDataPath = path.join(\n    `${basePath}/app/[language]/lib/`,\n    \"fileData.js\"\n  );\n  const fileDataFolderPath = `${basePath}/app/[language]/lib/`;\n  fs.mkdir(fileDataFolderPath, { recursive: true }, async (error) => {\n    if (error) {\n      console.log(error);\n    } else {\n      const fileData = sortByDate(transformType(await compileFile()));\n      fs.writeFile(\n        fileDataPath,\n        `/**\n        * @property {string} title - 文章标题\n        * @property {string} date - 文章日期\n        * @property {string} categories - 文章分类：Project,Weekly,Life,Technology\n        * @property {string} excerpt - 概述\n        * @property {string} html - 解析过后的html\n        * @property {string} id - id\n        * \n        */\n        const DATA = ${JSON.stringify(fileData)} \n        module.exports = {\n            DATA,\n          };\n          `,\n        (err) => {\n          if (err) {\n            console.error(\"Error creating file:\", err);\n          }\n        }\n      );\n    }\n  });\n}\n","import { mdFile } from \"../compile/extractMd\";\n\n//解析类型\nexport function transformType(files: mdFile[]) {\n  let newData: { [x: string]: string }[] = [];\n  files.forEach((file, index) => {\n    const { mdMatter, mdHtml, id } = file;\n    const { data } = mdMatter;\n    const newMatter = {\n      ...data,\n      id: id,\n      html: mdHtml,\n    };\n    newData.push(newMatter);\n  });\n  return newData;\n}\n\n// //操作一下数据库\n\n// async function uploadBlogs(client, files: any[]) {\n//   try {\n//     await client.sql`CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`;\n//     // Create the \"invoices\" table if it doesn't exist\n//     const createTable = await client.sql`\n//       CREATE TABLE IF NOT EXISTS blogs (\n//         id SERIAL PRIMARY KEY,\n//         title VARCHAR(255) NOT NULL,\n//         date DATE,\n//         categories VARCHAR(255),\n//         excerpt TEXT,\n//         html TEXT\n//       );\n//     `;\n\n//     console.log(`Created \"blog\" table`);\n\n//     // Insert data into the \"users\" table\n//     const insertedBlogs = await Promise.all(\n//       files.map(async (file) => {\n//         return client.sql`\n//         INSERT INTO blogs (title, date, categories, excerpt, html)\n//         VALUES (${file.id}, ${file.title}, ${file.date}, ${file.categories}, ${file.excerpt}, ${file.html})\n//         ON CONFLICT (id) DO NOTHING;\n//       `;\n//       })\n//     );\n\n//     console.log(`upload ${insertedBlogs.length} blogs`);\n\n//     return {\n//       createTable,\n//       blogs: insertedBlogs,\n//     };\n//   } catch (error) {\n//     console.error(\"Error upload blogs:\", error);\n//     throw error;\n//   }\n// }\n\n// //main\n// export async function main() {\n//   const files = transformType(await fileToJSON());\n//   const client = await db.connect();\n//   await uploadBlogs(client, files);\n//   await client.end();\n// }\n// main().catch((err) => {\n//   console.error(\n//     \"An error occurred while attempting to seed the database:\",\n//     err\n//   );\n// });\n","export function sortByDate(array: { [x: string]: string }[]) {\n  // 使用 Array.sort() 方法进行排序\n  array.sort(function (a, b) {\n    // 将日期字符串转换为日期对象进行比较\n    const dateA = new Date(a.date).getTime();\n    const dateB = new Date(b.date).getTime();\n\n    // 返回比较的结果\n    return dateB - dateA;\n  });\n\n  // 返回排序后的数组\n  return array;\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport { spawn } from \"child_process\";\nimport { readConfig } from \"../utils/readConfig\";\nimport { getRandomColor } from \"../utils/randomColor\";\nconst currentDir = process.cwd();\nconst gitFolderPath = path.join(currentDir, \".git\");\nfunction git(...args) {\n  return new Promise((resolve, reject) => {\n    const child = spawn(\"git\", args, { cwd: currentDir });\n    child.stdout.on(\"data\", (data) => {\n      console.log(data.toString());\n    });\n    child.stderr.on(\"data\", (data) => {\n      console.error(data.toString());\n    });\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        resolve(\"over\");\n      } else {\n        reject();\n      }\n    });\n  });\n}\n// * 自定义部署路径仓库以及初始化\nexport async function init() {\n  const json = await readConfig();\n  const { deployCon } = json;\n  // 删除 .git 文件夹\n  fs.rm(gitFolderPath, { recursive: true, force: true }, (err) => {\n    if (err) {\n      console.error(\"删除 .git 文件夹时出错：\", err);\n      return;\n    }\n    git(\"init\", \"-b\", `main`).then(() => {\n      console.log(\"init over\");\n      git(\n        \"remote\",\n        \"add\",\n        `${deployCon.remote_store_name}`,\n        `${deployCon.remote_store_url}`\n      ).then(() => {\n        git(\"add\", \".\").then(() => {\n          git(\"commit\", \"-m\", \"Initial commit\").then(() => {});\n        });\n      });\n    });\n  });\n  console.log(getRandomColor(\"please push to remote rep --force\"));\n}\n\nexport async function index() {\n  const json = await readConfig();\n  const { deployCon } = json;\n  git(\"add\", \".\").then(() => {\n    git(\"commit\", \"-m\", `${deployCon.commitMessage}`).then(() => {\n      git(\"push\", `${deployCon.remote_store_name}`, `${deployCon.branch}`);\n    });\n  });\n}\n","import fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\nimport { basePath } from \"../constant/content\";\nimport { Config } from \"../../types/config\";\n\n// JSON 文件路径\n\nexport function readConfig(): Promise<Config> {\n  const jsonFilePath = path.join(basePath, \"_blog.json\");\n  return new Promise((resolve, reject) => {\n    fs.readFile(jsonFilePath, \"utf8\", (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      try {\n        const jsonData = JSON.parse(data);\n        resolve(jsonData);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\n","import { unified } from \"unified\";\nimport remarkParse from \"remark-parse\";\nimport markdown from \"remark-parse\";\nimport remarkHtml from \"remark-html\";\nconst file = `\n# Hello World\n**TEST**\n`;\nexport async function test() {\n  //   const rep = await unified().use(remarkParse).use(remarkHtml).process(file);\n  //   return rep;\n  // 创建处理器\n  const processor = unified().use(markdown);\n  const ast = processor.parse(file);\n  console.log(JSON.stringify(ast, null, 2));\n}\n"],"mappings":"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","names":["path","index","file","path","file","path","fs","path","fs","path","fs","file","path","fs","path","fs","path","fs","fs","fs","path","fs","file","path","fs","path","fs","file","index","path","fs","fs","path","fs","path","path","fs","path","fs"]}